#!/usr/bin/env ruby

class UnicornTasks

  def initialize(args)
    @app_dir = File.expand_path('../../', __FILE__)
    @command = args.shift
  end

  def exec
    Dir.chdir(@app_dir) do
      case @command
      when 'start'
        start
      when 'restart'
        start_or_restart
      when 'restart_if_started'
        restart
      when 'stop'
        stop
      when 'status'
        status
      else
        puts "Usage: #{File.basename($0)} start|stop|restart|restart_if_started|status"
      end
    end
  end

  private

  def start_or_restart
    if unicorn_pid == ''
      start
    else
      restart
    end
  end

  def start
    if unicorn_pid == ''
      environment = ENV['RAILS_ENV'] || 'development'
      system "unicorn -c config/unicorn.rb -E #{environment} -D"
      if $?.success?
        puts "Started unicorn in #{environment} mode."
      else
        puts "Failed to start unicorn!. Try using bundle exec."
      end
    end
  end

  def restart
    unless unicorn_pid == ''
      system "kill -USR2 #{unicorn_pid}"
      puts "Restarted unicorn."
    end
  end

  def stop
    unless unicorn_pid == ''
      system "kill -QUIT #{unicorn_pid}"
      puts "Stopped unicorn."
    end
  end

  def status
    print "unicorn status: "
    if unicorn_pid == ''
      puts "STOPPED"
    else
      puts "RUNNING"
      puts "master PID: #{unicorn_pid}"
    end
  end

  def unicorn_pid
    return @pid unless @pid.nil?
    @pid = ''
    pidfiles = Dir.glob('tmp/pids/unicorn_*.pid')
    pidfiles.each do |pidfile|
      p = File.read(pidfile).strip
      `kill -s 0 #{p} 2> /dev/null`
      if $?.success?
        @pid << "#{p} "
      else
        File.delete(pidfile)
      end
    end
    @pid
  end

end

UnicornTasks.new(ARGV).exec
